//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.2
//     from Assets/Settings/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/Settings/Controls.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @Controls: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""version"": 1,
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""ShipControls"",
            ""id"": ""0fbd8b6c-ec99-4875-817f-0be44c83b534"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""351baf26-b7c2-4ff9-a4d9-4e7eac73e806"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CanonShot"",
                    ""type"": ""Button"",
                    ""id"": ""120680bf-43de-4150-aded-68a3bed02294"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MissileShot"",
                    ""type"": ""Button"",
                    ""id"": ""24313271-b043-41a9-9c34-5fedc918716d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AttachModule"",
                    ""type"": ""Button"",
                    ""id"": ""d6fd8ad1-20d4-4afe-8c98-01f952d4c9c7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateModule"",
                    ""type"": ""Button"",
                    ""id"": ""8eeffa8f-44b8-457a-945d-8da0ba1ef7b2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CycleModuleAnchor"",
                    ""type"": ""Button"",
                    ""id"": ""6f4ed0bc-9267-48e3-9ea9-68aca9eab54e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CycleModule"",
                    ""type"": ""Button"",
                    ""id"": ""85c50af4-b29f-4dda-bafb-fae5786d397d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""4782ff89-0431-4230-8d40-b7b45eb5334d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RestartGame"",
                    ""type"": ""Button"",
                    ""id"": ""3a889822-0d1e-4c0e-8822-192d77dc7b29"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NextFireMode"",
                    ""type"": ""Value"",
                    ""id"": ""ecb769f8-3a3f-45b2-b873-608d20edba7e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""QuickNextFireMode"",
                    ""type"": ""Button"",
                    ""id"": ""2df832f6-12d4-49ad-abfa-0421099ae4b1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FireModeCanons"",
                    ""type"": ""Button"",
                    ""id"": ""6f81c1be-1d29-44cf-9fee-380b29aa9e51"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FireModeMissiles"",
                    ""type"": ""Button"",
                    ""id"": ""3d9a9e2a-dbb6-4b89-ba24-970d12d51de6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FireModePD"",
                    ""type"": ""Button"",
                    ""id"": ""e5dfec2f-8a6a-4ef9-aabf-7a213a7c68be"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""46abce08-779f-45d8-bd28-fc095714ff03"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4deb22f9-99c8-4131-81a1-0bf30782583a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""4d8e8642-dfea-41ca-a5f9-650977d3c6e8"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6cf39cec-d918-4cf5-8296-2aee2c49de6d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0c3b11d3-b27d-4c1e-932b-e00c89c33ca8"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""db93ee41-2295-4a92-8c9d-1ed15924609f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""874aeede-e884-497e-9636-e90c7ea237e8"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""abf7257e-db93-4c81-9e5e-0af2f9ce4a51"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d51a7f56-d250-4d29-a907-1a9e186a4af4"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8d78d1d1-9db4-47c3-8523-b82483580aa8"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ffbf039f-1b38-4cfe-8433-4e9c4c580374"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CanonShot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ccda0af1-6921-4d7a-a721-108c03179a1f"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AttachModule"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fc5d9619-852a-40e6-b756-21a843b64138"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateModule"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""893b4efb-4b17-482b-baa2-05e90346a8e3"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CycleModuleAnchor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7394dda8-9e8e-4f2e-8d1d-b9e058e9f9c4"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CycleModule"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c65b3b3d-16e0-4def-8808-e3223c18f2b9"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MissileShot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bd068ccb-5454-41c9-bf3e-ebf7bff6dc51"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6e7b7076-0ccf-4dff-a7b7-932fc92acbb9"",
                    ""path"": ""<Keyboard>/f1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RestartGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6c460ca5-7312-4791-9441-22d49ff66c1b"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextFireMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""edb18579-b156-43cf-9fbf-9e3bb800cc5b"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""QuickNextFireMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""46857c6d-9eec-4b3d-bbed-f7a8e7eab700"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FireModeCanons"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7788192f-24e1-47d1-b9d9-9b6cd653e1bd"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FireModeMissiles"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5261acc2-eade-42f2-b4b7-320bcb04fdbd"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FireModePD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ShipControls
        m_ShipControls = asset.FindActionMap("ShipControls", throwIfNotFound: true);
        m_ShipControls_Move = m_ShipControls.FindAction("Move", throwIfNotFound: true);
        m_ShipControls_CanonShot = m_ShipControls.FindAction("CanonShot", throwIfNotFound: true);
        m_ShipControls_MissileShot = m_ShipControls.FindAction("MissileShot", throwIfNotFound: true);
        m_ShipControls_AttachModule = m_ShipControls.FindAction("AttachModule", throwIfNotFound: true);
        m_ShipControls_RotateModule = m_ShipControls.FindAction("RotateModule", throwIfNotFound: true);
        m_ShipControls_CycleModuleAnchor = m_ShipControls.FindAction("CycleModuleAnchor", throwIfNotFound: true);
        m_ShipControls_CycleModule = m_ShipControls.FindAction("CycleModule", throwIfNotFound: true);
        m_ShipControls_Fire = m_ShipControls.FindAction("Fire", throwIfNotFound: true);
        m_ShipControls_RestartGame = m_ShipControls.FindAction("RestartGame", throwIfNotFound: true);
        m_ShipControls_NextFireMode = m_ShipControls.FindAction("NextFireMode", throwIfNotFound: true);
        m_ShipControls_QuickNextFireMode = m_ShipControls.FindAction("QuickNextFireMode", throwIfNotFound: true);
        m_ShipControls_FireModeCanons = m_ShipControls.FindAction("FireModeCanons", throwIfNotFound: true);
        m_ShipControls_FireModeMissiles = m_ShipControls.FindAction("FireModeMissiles", throwIfNotFound: true);
        m_ShipControls_FireModePD = m_ShipControls.FindAction("FireModePD", throwIfNotFound: true);
    }

    ~@Controls()
    {
        UnityEngine.Debug.Assert(!m_ShipControls.enabled, "This will cause a leak and performance issues, Controls.ShipControls.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ShipControls
    private readonly InputActionMap m_ShipControls;
    private List<IShipControlsActions> m_ShipControlsActionsCallbackInterfaces = new List<IShipControlsActions>();
    private readonly InputAction m_ShipControls_Move;
    private readonly InputAction m_ShipControls_CanonShot;
    private readonly InputAction m_ShipControls_MissileShot;
    private readonly InputAction m_ShipControls_AttachModule;
    private readonly InputAction m_ShipControls_RotateModule;
    private readonly InputAction m_ShipControls_CycleModuleAnchor;
    private readonly InputAction m_ShipControls_CycleModule;
    private readonly InputAction m_ShipControls_Fire;
    private readonly InputAction m_ShipControls_RestartGame;
    private readonly InputAction m_ShipControls_NextFireMode;
    private readonly InputAction m_ShipControls_QuickNextFireMode;
    private readonly InputAction m_ShipControls_FireModeCanons;
    private readonly InputAction m_ShipControls_FireModeMissiles;
    private readonly InputAction m_ShipControls_FireModePD;
    /// <summary>
    /// Provides access to input actions defined in input action map "ShipControls".
    /// </summary>
    public struct ShipControlsActions
    {
        private @Controls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public ShipControlsActions(@Controls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "ShipControls/Move".
        /// </summary>
        public InputAction @Move => m_Wrapper.m_ShipControls_Move;
        /// <summary>
        /// Provides access to the underlying input action "ShipControls/CanonShot".
        /// </summary>
        public InputAction @CanonShot => m_Wrapper.m_ShipControls_CanonShot;
        /// <summary>
        /// Provides access to the underlying input action "ShipControls/MissileShot".
        /// </summary>
        public InputAction @MissileShot => m_Wrapper.m_ShipControls_MissileShot;
        /// <summary>
        /// Provides access to the underlying input action "ShipControls/AttachModule".
        /// </summary>
        public InputAction @AttachModule => m_Wrapper.m_ShipControls_AttachModule;
        /// <summary>
        /// Provides access to the underlying input action "ShipControls/RotateModule".
        /// </summary>
        public InputAction @RotateModule => m_Wrapper.m_ShipControls_RotateModule;
        /// <summary>
        /// Provides access to the underlying input action "ShipControls/CycleModuleAnchor".
        /// </summary>
        public InputAction @CycleModuleAnchor => m_Wrapper.m_ShipControls_CycleModuleAnchor;
        /// <summary>
        /// Provides access to the underlying input action "ShipControls/CycleModule".
        /// </summary>
        public InputAction @CycleModule => m_Wrapper.m_ShipControls_CycleModule;
        /// <summary>
        /// Provides access to the underlying input action "ShipControls/Fire".
        /// </summary>
        public InputAction @Fire => m_Wrapper.m_ShipControls_Fire;
        /// <summary>
        /// Provides access to the underlying input action "ShipControls/RestartGame".
        /// </summary>
        public InputAction @RestartGame => m_Wrapper.m_ShipControls_RestartGame;
        /// <summary>
        /// Provides access to the underlying input action "ShipControls/NextFireMode".
        /// </summary>
        public InputAction @NextFireMode => m_Wrapper.m_ShipControls_NextFireMode;
        /// <summary>
        /// Provides access to the underlying input action "ShipControls/QuickNextFireMode".
        /// </summary>
        public InputAction @QuickNextFireMode => m_Wrapper.m_ShipControls_QuickNextFireMode;
        /// <summary>
        /// Provides access to the underlying input action "ShipControls/FireModeCanons".
        /// </summary>
        public InputAction @FireModeCanons => m_Wrapper.m_ShipControls_FireModeCanons;
        /// <summary>
        /// Provides access to the underlying input action "ShipControls/FireModeMissiles".
        /// </summary>
        public InputAction @FireModeMissiles => m_Wrapper.m_ShipControls_FireModeMissiles;
        /// <summary>
        /// Provides access to the underlying input action "ShipControls/FireModePD".
        /// </summary>
        public InputAction @FireModePD => m_Wrapper.m_ShipControls_FireModePD;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_ShipControls; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="ShipControlsActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(ShipControlsActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="ShipControlsActions" />
        public void AddCallbacks(IShipControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_ShipControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ShipControlsActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @CanonShot.started += instance.OnCanonShot;
            @CanonShot.performed += instance.OnCanonShot;
            @CanonShot.canceled += instance.OnCanonShot;
            @MissileShot.started += instance.OnMissileShot;
            @MissileShot.performed += instance.OnMissileShot;
            @MissileShot.canceled += instance.OnMissileShot;
            @AttachModule.started += instance.OnAttachModule;
            @AttachModule.performed += instance.OnAttachModule;
            @AttachModule.canceled += instance.OnAttachModule;
            @RotateModule.started += instance.OnRotateModule;
            @RotateModule.performed += instance.OnRotateModule;
            @RotateModule.canceled += instance.OnRotateModule;
            @CycleModuleAnchor.started += instance.OnCycleModuleAnchor;
            @CycleModuleAnchor.performed += instance.OnCycleModuleAnchor;
            @CycleModuleAnchor.canceled += instance.OnCycleModuleAnchor;
            @CycleModule.started += instance.OnCycleModule;
            @CycleModule.performed += instance.OnCycleModule;
            @CycleModule.canceled += instance.OnCycleModule;
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
            @RestartGame.started += instance.OnRestartGame;
            @RestartGame.performed += instance.OnRestartGame;
            @RestartGame.canceled += instance.OnRestartGame;
            @NextFireMode.started += instance.OnNextFireMode;
            @NextFireMode.performed += instance.OnNextFireMode;
            @NextFireMode.canceled += instance.OnNextFireMode;
            @QuickNextFireMode.started += instance.OnQuickNextFireMode;
            @QuickNextFireMode.performed += instance.OnQuickNextFireMode;
            @QuickNextFireMode.canceled += instance.OnQuickNextFireMode;
            @FireModeCanons.started += instance.OnFireModeCanons;
            @FireModeCanons.performed += instance.OnFireModeCanons;
            @FireModeCanons.canceled += instance.OnFireModeCanons;
            @FireModeMissiles.started += instance.OnFireModeMissiles;
            @FireModeMissiles.performed += instance.OnFireModeMissiles;
            @FireModeMissiles.canceled += instance.OnFireModeMissiles;
            @FireModePD.started += instance.OnFireModePD;
            @FireModePD.performed += instance.OnFireModePD;
            @FireModePD.canceled += instance.OnFireModePD;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="ShipControlsActions" />
        private void UnregisterCallbacks(IShipControlsActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @CanonShot.started -= instance.OnCanonShot;
            @CanonShot.performed -= instance.OnCanonShot;
            @CanonShot.canceled -= instance.OnCanonShot;
            @MissileShot.started -= instance.OnMissileShot;
            @MissileShot.performed -= instance.OnMissileShot;
            @MissileShot.canceled -= instance.OnMissileShot;
            @AttachModule.started -= instance.OnAttachModule;
            @AttachModule.performed -= instance.OnAttachModule;
            @AttachModule.canceled -= instance.OnAttachModule;
            @RotateModule.started -= instance.OnRotateModule;
            @RotateModule.performed -= instance.OnRotateModule;
            @RotateModule.canceled -= instance.OnRotateModule;
            @CycleModuleAnchor.started -= instance.OnCycleModuleAnchor;
            @CycleModuleAnchor.performed -= instance.OnCycleModuleAnchor;
            @CycleModuleAnchor.canceled -= instance.OnCycleModuleAnchor;
            @CycleModule.started -= instance.OnCycleModule;
            @CycleModule.performed -= instance.OnCycleModule;
            @CycleModule.canceled -= instance.OnCycleModule;
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
            @RestartGame.started -= instance.OnRestartGame;
            @RestartGame.performed -= instance.OnRestartGame;
            @RestartGame.canceled -= instance.OnRestartGame;
            @NextFireMode.started -= instance.OnNextFireMode;
            @NextFireMode.performed -= instance.OnNextFireMode;
            @NextFireMode.canceled -= instance.OnNextFireMode;
            @QuickNextFireMode.started -= instance.OnQuickNextFireMode;
            @QuickNextFireMode.performed -= instance.OnQuickNextFireMode;
            @QuickNextFireMode.canceled -= instance.OnQuickNextFireMode;
            @FireModeCanons.started -= instance.OnFireModeCanons;
            @FireModeCanons.performed -= instance.OnFireModeCanons;
            @FireModeCanons.canceled -= instance.OnFireModeCanons;
            @FireModeMissiles.started -= instance.OnFireModeMissiles;
            @FireModeMissiles.performed -= instance.OnFireModeMissiles;
            @FireModeMissiles.canceled -= instance.OnFireModeMissiles;
            @FireModePD.started -= instance.OnFireModePD;
            @FireModePD.performed -= instance.OnFireModePD;
            @FireModePD.canceled -= instance.OnFireModePD;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="ShipControlsActions.UnregisterCallbacks(IShipControlsActions)" />.
        /// </summary>
        /// <seealso cref="ShipControlsActions.UnregisterCallbacks(IShipControlsActions)" />
        public void RemoveCallbacks(IShipControlsActions instance)
        {
            if (m_Wrapper.m_ShipControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="ShipControlsActions.AddCallbacks(IShipControlsActions)" />
        /// <seealso cref="ShipControlsActions.RemoveCallbacks(IShipControlsActions)" />
        /// <seealso cref="ShipControlsActions.UnregisterCallbacks(IShipControlsActions)" />
        public void SetCallbacks(IShipControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_ShipControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ShipControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="ShipControlsActions" /> instance referencing this action map.
    /// </summary>
    public ShipControlsActions @ShipControls => new ShipControlsActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "ShipControls" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="ShipControlsActions.AddCallbacks(IShipControlsActions)" />
    /// <seealso cref="ShipControlsActions.RemoveCallbacks(IShipControlsActions)" />
    public interface IShipControlsActions
    {
        /// <summary>
        /// Method invoked when associated input action "Move" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMove(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "CanonShot" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnCanonShot(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "MissileShot" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMissileShot(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "AttachModule" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnAttachModule(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "RotateModule" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRotateModule(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "CycleModuleAnchor" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnCycleModuleAnchor(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "CycleModule" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnCycleModule(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Fire" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnFire(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "RestartGame" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRestartGame(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "NextFireMode" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNextFireMode(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "QuickNextFireMode" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnQuickNextFireMode(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "FireModeCanons" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnFireModeCanons(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "FireModeMissiles" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnFireModeMissiles(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "FireModePD" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnFireModePD(InputAction.CallbackContext context);
    }
}
